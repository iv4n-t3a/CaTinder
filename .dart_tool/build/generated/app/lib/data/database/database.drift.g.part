// ignore_for_file: type=lint
class $HistoryTableTable extends HistoryTable
    with TableInfo<$HistoryTableTable, HistoryTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $HistoryTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _catImageUrlMeta =
      const VerificationMeta('catImageUrl');
  @override
  late final GeneratedColumn<String> catImageUrl = GeneratedColumn<String>(
      'cat_image_url', aliasedName, false,
      type: DriftSqlType.string,
      requiredDuringInsert: true,
      defaultConstraints: GeneratedColumn.constraintIsAlways('UNIQUE'));
  static const VerificationMeta _catOriginMeta =
      const VerificationMeta('catOrigin');
  @override
  late final GeneratedColumn<String> catOrigin = GeneratedColumn<String>(
      'cat_origin', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _catLifeSpanMeta =
      const VerificationMeta('catLifeSpan');
  @override
  late final GeneratedColumn<String> catLifeSpan = GeneratedColumn<String>(
      'cat_life_span', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _catTemperamentMeta =
      const VerificationMeta('catTemperament');
  @override
  late final GeneratedColumn<String> catTemperament = GeneratedColumn<String>(
      'cat_temperament', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _catBreedMeta =
      const VerificationMeta('catBreed');
  @override
  late final GeneratedColumn<String> catBreed = GeneratedColumn<String>(
      'cat_breed', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _catDescriptionMeta =
      const VerificationMeta('catDescription');
  @override
  late final GeneratedColumn<String> catDescription = GeneratedColumn<String>(
      'cat_description', aliasedName, false,
      type: DriftSqlType.string, requiredDuringInsert: true);
  static const VerificationMeta _likeDateMeta =
      const VerificationMeta('likeDate');
  @override
  late final GeneratedColumn<DateTime> likeDate = GeneratedColumn<DateTime>(
      'like_date', aliasedName, false,
      type: DriftSqlType.dateTime,
      requiredDuringInsert: false,
      defaultValue: currentDateAndTime);
  @override
  List<GeneratedColumn> get $columns => [
        catImageUrl,
        catOrigin,
        catLifeSpan,
        catTemperament,
        catBreed,
        catDescription,
        likeDate
      ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'history_table';
  @override
  VerificationContext validateIntegrity(Insertable<HistoryTableData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('cat_image_url')) {
      context.handle(
          _catImageUrlMeta,
          catImageUrl.isAcceptableOrUnknown(
              data['cat_image_url']!, _catImageUrlMeta));
    } else if (isInserting) {
      context.missing(_catImageUrlMeta);
    }
    if (data.containsKey('cat_origin')) {
      context.handle(_catOriginMeta,
          catOrigin.isAcceptableOrUnknown(data['cat_origin']!, _catOriginMeta));
    } else if (isInserting) {
      context.missing(_catOriginMeta);
    }
    if (data.containsKey('cat_life_span')) {
      context.handle(
          _catLifeSpanMeta,
          catLifeSpan.isAcceptableOrUnknown(
              data['cat_life_span']!, _catLifeSpanMeta));
    } else if (isInserting) {
      context.missing(_catLifeSpanMeta);
    }
    if (data.containsKey('cat_temperament')) {
      context.handle(
          _catTemperamentMeta,
          catTemperament.isAcceptableOrUnknown(
              data['cat_temperament']!, _catTemperamentMeta));
    } else if (isInserting) {
      context.missing(_catTemperamentMeta);
    }
    if (data.containsKey('cat_breed')) {
      context.handle(_catBreedMeta,
          catBreed.isAcceptableOrUnknown(data['cat_breed']!, _catBreedMeta));
    } else if (isInserting) {
      context.missing(_catBreedMeta);
    }
    if (data.containsKey('cat_description')) {
      context.handle(
          _catDescriptionMeta,
          catDescription.isAcceptableOrUnknown(
              data['cat_description']!, _catDescriptionMeta));
    } else if (isInserting) {
      context.missing(_catDescriptionMeta);
    }
    if (data.containsKey('like_date')) {
      context.handle(_likeDateMeta,
          likeDate.isAcceptableOrUnknown(data['like_date']!, _likeDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => const {};
  @override
  HistoryTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return HistoryTableData(
      catImageUrl: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}cat_image_url'])!,
      catOrigin: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}cat_origin'])!,
      catLifeSpan: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}cat_life_span'])!,
      catTemperament: attachedDatabase.typeMapping.read(
          DriftSqlType.string, data['${effectivePrefix}cat_temperament'])!,
      catBreed: attachedDatabase.typeMapping
          .read(DriftSqlType.string, data['${effectivePrefix}cat_breed'])!,
      catDescription: attachedDatabase.typeMapping.read(
          DriftSqlType.string, data['${effectivePrefix}cat_description'])!,
      likeDate: attachedDatabase.typeMapping
          .read(DriftSqlType.dateTime, data['${effectivePrefix}like_date'])!,
    );
  }

  @override
  $HistoryTableTable createAlias(String alias) {
    return $HistoryTableTable(attachedDatabase, alias);
  }
}

class HistoryTableData extends DataClass
    implements Insertable<HistoryTableData> {
  final String catImageUrl;
  final String catOrigin;
  final String catLifeSpan;
  final String catTemperament;
  final String catBreed;
  final String catDescription;
  final DateTime likeDate;
  const HistoryTableData(
      {required this.catImageUrl,
      required this.catOrigin,
      required this.catLifeSpan,
      required this.catTemperament,
      required this.catBreed,
      required this.catDescription,
      required this.likeDate});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['cat_image_url'] = Variable<String>(catImageUrl);
    map['cat_origin'] = Variable<String>(catOrigin);
    map['cat_life_span'] = Variable<String>(catLifeSpan);
    map['cat_temperament'] = Variable<String>(catTemperament);
    map['cat_breed'] = Variable<String>(catBreed);
    map['cat_description'] = Variable<String>(catDescription);
    map['like_date'] = Variable<DateTime>(likeDate);
    return map;
  }

  HistoryTableCompanion toCompanion(bool nullToAbsent) {
    return HistoryTableCompanion(
      catImageUrl: Value(catImageUrl),
      catOrigin: Value(catOrigin),
      catLifeSpan: Value(catLifeSpan),
      catTemperament: Value(catTemperament),
      catBreed: Value(catBreed),
      catDescription: Value(catDescription),
      likeDate: Value(likeDate),
    );
  }

  factory HistoryTableData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return HistoryTableData(
      catImageUrl: serializer.fromJson<String>(json['catImageUrl']),
      catOrigin: serializer.fromJson<String>(json['catOrigin']),
      catLifeSpan: serializer.fromJson<String>(json['catLifeSpan']),
      catTemperament: serializer.fromJson<String>(json['catTemperament']),
      catBreed: serializer.fromJson<String>(json['catBreed']),
      catDescription: serializer.fromJson<String>(json['catDescription']),
      likeDate: serializer.fromJson<DateTime>(json['likeDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'catImageUrl': serializer.toJson<String>(catImageUrl),
      'catOrigin': serializer.toJson<String>(catOrigin),
      'catLifeSpan': serializer.toJson<String>(catLifeSpan),
      'catTemperament': serializer.toJson<String>(catTemperament),
      'catBreed': serializer.toJson<String>(catBreed),
      'catDescription': serializer.toJson<String>(catDescription),
      'likeDate': serializer.toJson<DateTime>(likeDate),
    };
  }

  HistoryTableData copyWith(
          {String? catImageUrl,
          String? catOrigin,
          String? catLifeSpan,
          String? catTemperament,
          String? catBreed,
          String? catDescription,
          DateTime? likeDate}) =>
      HistoryTableData(
        catImageUrl: catImageUrl ?? this.catImageUrl,
        catOrigin: catOrigin ?? this.catOrigin,
        catLifeSpan: catLifeSpan ?? this.catLifeSpan,
        catTemperament: catTemperament ?? this.catTemperament,
        catBreed: catBreed ?? this.catBreed,
        catDescription: catDescription ?? this.catDescription,
        likeDate: likeDate ?? this.likeDate,
      );
  HistoryTableData copyWithCompanion(HistoryTableCompanion data) {
    return HistoryTableData(
      catImageUrl:
          data.catImageUrl.present ? data.catImageUrl.value : this.catImageUrl,
      catOrigin: data.catOrigin.present ? data.catOrigin.value : this.catOrigin,
      catLifeSpan:
          data.catLifeSpan.present ? data.catLifeSpan.value : this.catLifeSpan,
      catTemperament: data.catTemperament.present
          ? data.catTemperament.value
          : this.catTemperament,
      catBreed: data.catBreed.present ? data.catBreed.value : this.catBreed,
      catDescription: data.catDescription.present
          ? data.catDescription.value
          : this.catDescription,
      likeDate: data.likeDate.present ? data.likeDate.value : this.likeDate,
    );
  }

  @override
  String toString() {
    return (StringBuffer('HistoryTableData(')
          ..write('catImageUrl: $catImageUrl, ')
          ..write('catOrigin: $catOrigin, ')
          ..write('catLifeSpan: $catLifeSpan, ')
          ..write('catTemperament: $catTemperament, ')
          ..write('catBreed: $catBreed, ')
          ..write('catDescription: $catDescription, ')
          ..write('likeDate: $likeDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(catImageUrl, catOrigin, catLifeSpan,
      catTemperament, catBreed, catDescription, likeDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HistoryTableData &&
          other.catImageUrl == this.catImageUrl &&
          other.catOrigin == this.catOrigin &&
          other.catLifeSpan == this.catLifeSpan &&
          other.catTemperament == this.catTemperament &&
          other.catBreed == this.catBreed &&
          other.catDescription == this.catDescription &&
          other.likeDate == this.likeDate);
}

class HistoryTableCompanion extends UpdateCompanion<HistoryTableData> {
  final Value<String> catImageUrl;
  final Value<String> catOrigin;
  final Value<String> catLifeSpan;
  final Value<String> catTemperament;
  final Value<String> catBreed;
  final Value<String> catDescription;
  final Value<DateTime> likeDate;
  final Value<int> rowid;
  const HistoryTableCompanion({
    this.catImageUrl = const Value.absent(),
    this.catOrigin = const Value.absent(),
    this.catLifeSpan = const Value.absent(),
    this.catTemperament = const Value.absent(),
    this.catBreed = const Value.absent(),
    this.catDescription = const Value.absent(),
    this.likeDate = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  HistoryTableCompanion.insert({
    required String catImageUrl,
    required String catOrigin,
    required String catLifeSpan,
    required String catTemperament,
    required String catBreed,
    required String catDescription,
    this.likeDate = const Value.absent(),
    this.rowid = const Value.absent(),
  })  : catImageUrl = Value(catImageUrl),
        catOrigin = Value(catOrigin),
        catLifeSpan = Value(catLifeSpan),
        catTemperament = Value(catTemperament),
        catBreed = Value(catBreed),
        catDescription = Value(catDescription);
  static Insertable<HistoryTableData> custom({
    Expression<String>? catImageUrl,
    Expression<String>? catOrigin,
    Expression<String>? catLifeSpan,
    Expression<String>? catTemperament,
    Expression<String>? catBreed,
    Expression<String>? catDescription,
    Expression<DateTime>? likeDate,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (catImageUrl != null) 'cat_image_url': catImageUrl,
      if (catOrigin != null) 'cat_origin': catOrigin,
      if (catLifeSpan != null) 'cat_life_span': catLifeSpan,
      if (catTemperament != null) 'cat_temperament': catTemperament,
      if (catBreed != null) 'cat_breed': catBreed,
      if (catDescription != null) 'cat_description': catDescription,
      if (likeDate != null) 'like_date': likeDate,
      if (rowid != null) 'rowid': rowid,
    });
  }

  HistoryTableCompanion copyWith(
      {Value<String>? catImageUrl,
      Value<String>? catOrigin,
      Value<String>? catLifeSpan,
      Value<String>? catTemperament,
      Value<String>? catBreed,
      Value<String>? catDescription,
      Value<DateTime>? likeDate,
      Value<int>? rowid}) {
    return HistoryTableCompanion(
      catImageUrl: catImageUrl ?? this.catImageUrl,
      catOrigin: catOrigin ?? this.catOrigin,
      catLifeSpan: catLifeSpan ?? this.catLifeSpan,
      catTemperament: catTemperament ?? this.catTemperament,
      catBreed: catBreed ?? this.catBreed,
      catDescription: catDescription ?? this.catDescription,
      likeDate: likeDate ?? this.likeDate,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (catImageUrl.present) {
      map['cat_image_url'] = Variable<String>(catImageUrl.value);
    }
    if (catOrigin.present) {
      map['cat_origin'] = Variable<String>(catOrigin.value);
    }
    if (catLifeSpan.present) {
      map['cat_life_span'] = Variable<String>(catLifeSpan.value);
    }
    if (catTemperament.present) {
      map['cat_temperament'] = Variable<String>(catTemperament.value);
    }
    if (catBreed.present) {
      map['cat_breed'] = Variable<String>(catBreed.value);
    }
    if (catDescription.present) {
      map['cat_description'] = Variable<String>(catDescription.value);
    }
    if (likeDate.present) {
      map['like_date'] = Variable<DateTime>(likeDate.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HistoryTableCompanion(')
          ..write('catImageUrl: $catImageUrl, ')
          ..write('catOrigin: $catOrigin, ')
          ..write('catLifeSpan: $catLifeSpan, ')
          ..write('catTemperament: $catTemperament, ')
          ..write('catBreed: $catBreed, ')
          ..write('catDescription: $catDescription, ')
          ..write('likeDate: $likeDate, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(e);
  $AppDatabaseManager get managers => $AppDatabaseManager(this);
  late final $HistoryTableTable historyTable = $HistoryTableTable(this);
  @override
  Iterable<TableInfo<Table, Object?>> get allTables =>
      allSchemaEntities.whereType<TableInfo<Table, Object?>>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [historyTable];
}

typedef $$HistoryTableTableCreateCompanionBuilder = HistoryTableCompanion
    Function({
  required String catImageUrl,
  required String catOrigin,
  required String catLifeSpan,
  required String catTemperament,
  required String catBreed,
  required String catDescription,
  Value<DateTime> likeDate,
  Value<int> rowid,
});
typedef $$HistoryTableTableUpdateCompanionBuilder = HistoryTableCompanion
    Function({
  Value<String> catImageUrl,
  Value<String> catOrigin,
  Value<String> catLifeSpan,
  Value<String> catTemperament,
  Value<String> catBreed,
  Value<String> catDescription,
  Value<DateTime> likeDate,
  Value<int> rowid,
});

class $$HistoryTableTableFilterComposer
    extends Composer<_$AppDatabase, $HistoryTableTable> {
  $$HistoryTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get catImageUrl => $composableBuilder(
      column: $table.catImageUrl, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get catOrigin => $composableBuilder(
      column: $table.catOrigin, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get catLifeSpan => $composableBuilder(
      column: $table.catLifeSpan, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get catTemperament => $composableBuilder(
      column: $table.catTemperament,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get catBreed => $composableBuilder(
      column: $table.catBreed, builder: (column) => ColumnFilters(column));

  ColumnFilters<String> get catDescription => $composableBuilder(
      column: $table.catDescription,
      builder: (column) => ColumnFilters(column));

  ColumnFilters<DateTime> get likeDate => $composableBuilder(
      column: $table.likeDate, builder: (column) => ColumnFilters(column));
}

class $$HistoryTableTableOrderingComposer
    extends Composer<_$AppDatabase, $HistoryTableTable> {
  $$HistoryTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get catImageUrl => $composableBuilder(
      column: $table.catImageUrl, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get catOrigin => $composableBuilder(
      column: $table.catOrigin, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get catLifeSpan => $composableBuilder(
      column: $table.catLifeSpan, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get catTemperament => $composableBuilder(
      column: $table.catTemperament,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get catBreed => $composableBuilder(
      column: $table.catBreed, builder: (column) => ColumnOrderings(column));

  ColumnOrderings<String> get catDescription => $composableBuilder(
      column: $table.catDescription,
      builder: (column) => ColumnOrderings(column));

  ColumnOrderings<DateTime> get likeDate => $composableBuilder(
      column: $table.likeDate, builder: (column) => ColumnOrderings(column));
}

class $$HistoryTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $HistoryTableTable> {
  $$HistoryTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get catImageUrl => $composableBuilder(
      column: $table.catImageUrl, builder: (column) => column);

  GeneratedColumn<String> get catOrigin =>
      $composableBuilder(column: $table.catOrigin, builder: (column) => column);

  GeneratedColumn<String> get catLifeSpan => $composableBuilder(
      column: $table.catLifeSpan, builder: (column) => column);

  GeneratedColumn<String> get catTemperament => $composableBuilder(
      column: $table.catTemperament, builder: (column) => column);

  GeneratedColumn<String> get catBreed =>
      $composableBuilder(column: $table.catBreed, builder: (column) => column);

  GeneratedColumn<String> get catDescription => $composableBuilder(
      column: $table.catDescription, builder: (column) => column);

  GeneratedColumn<DateTime> get likeDate =>
      $composableBuilder(column: $table.likeDate, builder: (column) => column);
}

class $$HistoryTableTableTableManager extends RootTableManager<
    _$AppDatabase,
    $HistoryTableTable,
    HistoryTableData,
    $$HistoryTableTableFilterComposer,
    $$HistoryTableTableOrderingComposer,
    $$HistoryTableTableAnnotationComposer,
    $$HistoryTableTableCreateCompanionBuilder,
    $$HistoryTableTableUpdateCompanionBuilder,
    (
      HistoryTableData,
      BaseReferences<_$AppDatabase, $HistoryTableTable, HistoryTableData>
    ),
    HistoryTableData,
    PrefetchHooks Function()> {
  $$HistoryTableTableTableManager(_$AppDatabase db, $HistoryTableTable table)
      : super(TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$HistoryTableTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$HistoryTableTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$HistoryTableTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback: ({
            Value<String> catImageUrl = const Value.absent(),
            Value<String> catOrigin = const Value.absent(),
            Value<String> catLifeSpan = const Value.absent(),
            Value<String> catTemperament = const Value.absent(),
            Value<String> catBreed = const Value.absent(),
            Value<String> catDescription = const Value.absent(),
            Value<DateTime> likeDate = const Value.absent(),
            Value<int> rowid = const Value.absent(),
          }) =>
              HistoryTableCompanion(
            catImageUrl: catImageUrl,
            catOrigin: catOrigin,
            catLifeSpan: catLifeSpan,
            catTemperament: catTemperament,
            catBreed: catBreed,
            catDescription: catDescription,
            likeDate: likeDate,
            rowid: rowid,
          ),
          createCompanionCallback: ({
            required String catImageUrl,
            required String catOrigin,
            required String catLifeSpan,
            required String catTemperament,
            required String catBreed,
            required String catDescription,
            Value<DateTime> likeDate = const Value.absent(),
            Value<int> rowid = const Value.absent(),
          }) =>
              HistoryTableCompanion.insert(
            catImageUrl: catImageUrl,
            catOrigin: catOrigin,
            catLifeSpan: catLifeSpan,
            catTemperament: catTemperament,
            catBreed: catBreed,
            catDescription: catDescription,
            likeDate: likeDate,
            rowid: rowid,
          ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ));
}

typedef $$HistoryTableTableProcessedTableManager = ProcessedTableManager<
    _$AppDatabase,
    $HistoryTableTable,
    HistoryTableData,
    $$HistoryTableTableFilterComposer,
    $$HistoryTableTableOrderingComposer,
    $$HistoryTableTableAnnotationComposer,
    $$HistoryTableTableCreateCompanionBuilder,
    $$HistoryTableTableUpdateCompanionBuilder,
    (
      HistoryTableData,
      BaseReferences<_$AppDatabase, $HistoryTableTable, HistoryTableData>
    ),
    HistoryTableData,
    PrefetchHooks Function()>;

class $AppDatabaseManager {
  final _$AppDatabase _db;
  $AppDatabaseManager(this._db);
  $$HistoryTableTableTableManager get historyTable =>
      $$HistoryTableTableTableManager(_db, _db.historyTable);
}
